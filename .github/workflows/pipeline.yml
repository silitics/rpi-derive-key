name: Pipeline

on:
  push:
    branches:
      - main
      - ci
  create:
    tags:
      - v*
  pull_request:
  workflow_dispatch:

jobs:
  lint-rustfmt:
    name: Lint (Rustfmt)
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
      - name: Setup | Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt
      - name: Lint | Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
  
  lint-clippy:
    name: Lint (Clippy)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
      - name: Setup | Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: clippy
      - name: Lint | Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
  
  build-docs:
    name: Build Docs
    runs-on: ubuntu-latest
    # Required for upload to succeed.
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
      - name: Setup | Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: aarch64-unknown-linux-gnu
          override: true
      - name: Build | Docs
        uses: actions-rs/cargo@v1
        with:
          command: doc 
          args: >
            --workspace --lib --document-private-items
            --target aarch64-unknown-linux-gnu
            --exclude rpi-derive-key-python
      - name: Pages | Upload Artifact
        if: github.ref == 'refs/heads/main' && github.repository == 'silitics/rpi-derive-key'
        uses: actions/upload-pages-artifact@v1
        with:
          path: target/aarch64-unknown-linux-gnu/doc
      - name: Pages | Deploy
        if: github.ref == 'refs/heads/main' && github.repository == 'silitics/rpi-derive-key'
        uses: actions/deploy-pages@v1

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    needs: [lint-rustfmt, lint-clippy]
    strategy:
      matrix:
        rust: [stable, "1.65"]
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
      - name: Setup | Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Test | Run Tests
        uses: actions-rs/cargo@v1
        with:
          command: test

  build_python_wheels:
    name: Build Python Wheels
    runs-on: ${{ matrix.os }}
    needs: [test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: macos-latest
          - os: windows-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
      - name: Build | Wheel (Linux) 
        uses: PyO3/maturin-action@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          command: build
          args: --release --locked -o dist --find-interpreter
          target: ${{ matrix.target }}
          manylinux: auto
          working-directory: python
      - name: Build | Wheel (MacOS)
        uses: PyO3/maturin-action@v1
        if: matrix.os == 'macos-latest'
        with:
          command: build
          # Works on both Intel and ARM.
          args: --release --locked -o dist --universal2 --find-interpreter
          working-directory: python
      - name: Build | Wheel (Windows)
        uses: PyO3/maturin-action@v1
        if: matrix.os == 'windows-latest'
        with:
          command: build
          args: --release --locked -o dist --find-interpreter
          working-directory: python
      - name: Assets | Upload
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: python/dist/**/*

  build_linux_binaries:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            arch: amd64
          - target: aarch64-unknown-linux-musl
            arch: arm64
          - target: armv7-unknown-linux-musleabihf
            arch: armhf
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
      - name: Setup | Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rust-src
      - name: Build | Standalone Binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          # We use `build-std` to reduce the size of the final binary.
          args: >
            --release
            --locked
            --bin rpi-derive-key
            --target=${{ matrix.target }}
            -Z build-std=std,panic_abort
            -Z build-std-features=panic_immediate_abort
      - name: Info | Binary Size
        run: du -h target/${{ matrix.target }}/release/rpi-derive-key
      # We package the binary into a `.tar.gz` such that the permissions are preserved.
      - name: Assets | Prepare
        run: |
          mkdir assets
          pushd target/${{ matrix.target }}/release
          tar czvf ../../../assets/rpi-derive-key_${{ matrix.arch }}.tar.gz rpi-derive-key
          popd
      - name: Assets | List
        run: find assets
      - name: Assets | Upload
        uses: actions/upload-artifact@v3
        with:
          name: assets
          path: assets/**/*
  
  build_debian_packages:
    name: Build Debian Packages
    runs-on: ubuntu-latest
    needs: [build_linux_binaries]
    strategy:
      matrix:
        arch: [arm64, armhf]
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
      - name: Setup | Download Assets
        uses: actions/download-artifact@v3
        with:
          name: assets
          path: assets
      - name: Debian | Build Package
        run: |
          set -exuo pipefail
          mkdir -p assets debian/usr/bin debian/DEBIAN debian/lib/systemd/system/
          pushd debian/usr/bin
          tar xvzf ../../../assets/rpi-derive-key_${{ matrix.arch }}.tar.gz
          popd
          version=$(grep version Cargo.toml | head -1 | awk '{print $3}' | tr -d '"')
          cat > debian/DEBIAN/control <<- EOF
          Package: rpi-derive-key
          Version: $version
          Section: utils
          Priority: optional
          Architecture: ${{ matrix.arch }}
          Maintainer: Silitics GmbH <support@silitics.com>
          Homepage: https://github.com/silitics/rpi-derive-key
          Repository: https://github.com/silitics/rpi-derive-key.git
          Description:
              A utility for deriving secure device-specific keys on Raspberry Pi.
          EOF
          cat > debian/lib/systemd/system/rpi-derive-key.service <<- EOF
          [Unit]
          Description=Initialize the private key in the Raspberry Pi's OTP memory.

          [Service]
          Type=oneshot
          Environment="ARGS=%I"
          ExecStart=/usr/bin/rpi-derive-key \$ARGS init

          [Install]
          WantedBy=multi-user.target
          EOF
          find debian
          cat debian/DEBIAN/control
          cat debian/lib/systemd/system/rpi-derive-key.service
          dpkg-deb -Zgzip --build debian assets/rpi-derive-key_${{ matrix.arch }}.deb
      - name: Assets | List
        run: find assets
      - name: Assets | Upload
        uses: actions/upload-artifact@v3
        with:
          name: assets
          path: assets/*.deb
  
  create_github_release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    needs: [build_python_wheels, build_linux_binaries, build_debian_packages]
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
      - name: Setup | Download Assets
        uses: actions/download-artifact@v3
        with:
          name: assets
          path: assets
      - name: Assets | List
        run: find assets
      - name: Assets | Compute Checksums
        run: >
          for file in assets/*; do
            sha256sum "${file}" | awk '{print $1}' > "${file}.sha256";
          done
      - name: Release | Get Version
        id: get_version
        run: |
          version=$(grep version Cargo.toml | head -1 | awk '{print $3}' | tr -d '"')
          echo "version=${version}" >> $GITHUB_OUTPUT
      - name: GitHub | Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'create'
        with:
          files: assets/**/*
          name: Release v${{ steps.get_version.outputs.version }}
          tag_name: ${{ github.ref }}
  
  publish_to_pypi:
    name: Publish to PyPi
    runs-on: ubuntu-latest
    needs: [create_github_release]
    steps:
      - name: Setup | Download Wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Info | List Wheels
        run: ls -l dist
      - name: Publish | Publish Wheels to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'create'
        with:
          skip_existing: true
          password: ${{ secrets.PYPI_API_TOKEN }}
  
  publish_to_crates_io:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [create_github_release]
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
      - name: Setup | Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Publish | Publish to Crates.io
        uses: actions-rs/cargo@v1
        if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'create'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        with:
          command: publish
          args: --manifest-path crates/rpi-derive-key/Cargo.toml
